import pandas as pd
from sqlalchemy import create_engine

# Step 1: Load Data
order_df = pd.read_csv('/content/ML-Dataset.csv')

# Step 2: Transform Data
order_df['OrderDate'] = pd.to_datetime(order_df['OrderDate'], format='%Y-%m-%d', errors='coerce')

# Handle missing values by filling with zero or dropping based on requirements
order_df.fillna(0, inplace=True)

# Ensure numeric columns are in the correct format
numeric_cols_order = ['OrderItemQuantity', 'PerUnitPrice', 'TotalItemQuantity']
order_df[numeric_cols_order] = order_df[numeric_cols_order].apply(pd.to_numeric)

order_df['Total_Sales'] = order_df['OrderItemQuantity'] * order_df['PerUnitPrice']

# Step 3: Load Data into Database
# Set up a SQLite database connection (change to your DB)
engine = create_engine('sqlite:///inventory_management.db')

# Load each dataframe into a separate table
order_df.to_sql('order_transactions', con=engine, if_exists='replace', index=False)

# Validate the load by querying a sample
with engine.connect() as conn:
    sample_order = pd.read_sql("SELECT * FROM order_transactions LIMIT 5", conn)

print("\nSample Order Data:")
print(sample_order)

# Close the database connection
engine.dispose()


import pandas as pd
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt
from pandas.tseries.frequencies import to_offset

# Step 1: Load the data
data_path = '/content/ML-Dataset.csv'
data = pd.read_csv(data_path)

# Step 2: Ensure 'OrderDate' column is in datetime format and handle errors
data['OrderDate'] = pd.to_datetime(data['OrderDate'], errors='coerce', dayfirst=True)

# Step 3: Drop any rows with invalid or missing dates
data = data.dropna(subset=['OrderDate'])

# Step 4: Sort data by date
data = data.sort_values('OrderDate').reset_index(drop=True)

# Step 5: Aggregate data by date to ensure it's in daily format
daily_data = data.groupby('OrderDate')['OrderItemQuantity'].sum().asfreq('D')

# Step 6: Fill any missing days with zero demand (assuming missing days mean zero orders)
daily_data = daily_data.fillna(0)

# Step 7: Plot the last 1 year of data to inspect demand patterns
plt.figure(figsize=(12, 6))
daily_data[-365:].plot(title='Last 1 Year of Demand Data')
plt.xlabel('Date')
plt.ylabel('Daily Demand')
plt.show()

# Step 8: Define and train the SARIMA model
# Using seasonal order to capture weekly or monthly seasonality (choose based on data pattern)
# Here, p=1, d=1, q=1 with seasonal order as (1,1,1,7) as an example; adjust these values as needed
sarima_model = SARIMAX(daily_data, order=(1, 1, 1), seasonal_order=(1, 1, 1, 7), enforce_stationarity=False, enforce_invertibility=False)
sarima_fit = sarima_model.fit(disp=False)

# Step 9: Forecast future demand (e.g., for 30 days)
forecast_period = 30  # Set the number of days you want to forecast
forecast = sarima_fit.get_forecast(steps=forecast_period)
forecast_index = pd.date_range(daily_data.index[-1] + to_offset("1D"), periods=forecast_period, freq="D")
forecast_values = forecast.predicted_mean
forecast_conf_int = forecast.conf_int()

# Step 10: Plot historical data and forecast for the last 1 year + future 30 days
plt.figure(figsize=(12, 6))
plt.plot(daily_data[-365:], label='Historical Demand')
plt.plot(forecast_index, forecast_values, label='Forecasted Demand', color='orange')
plt.fill_between(forecast_index,
                 forecast_conf_int.iloc[:, 0],
                 forecast_conf_int.iloc[:, 1],
                 color='orange', alpha=0.3)
plt.title('Last Year of Demand with 30-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Daily Demand')
plt.legend()
plt.show()

# Step 11: Print the forecasted values for further analysis
print("Forecasted demand for the next 30 days:")
print(forecast_values)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load the dataset
file_path = '/content/ML-Dataset.csv'
data = pd.read_csv(file_path)

# Convert OrderDate to datetime
data['OrderDate'] = pd.to_datetime(data['OrderDate'], errors='coerce')

# Filter and aggregate data for demand forecasting
# Selecting relevant columns and dropping NaN in 'OrderDate'
data = data[['OrderDate', 'OrderItemQuantity']].dropna()

# Resample to daily frequency, summing order quantities per day
daily_data = data.set_index('OrderDate').resample('D').sum()

# Fill missing dates with 0 (no demand on those days)
daily_data = daily_data.fillna(0)

# Check stationarity using Augmented Dickey-Fuller test
adf_test = adfuller(daily_data['OrderItemQuantity'])
adf_result = adf_test[1]  # p-value

# Differencing if necessary based on p-value (assuming stationarity if p <= 0.05)
differenced_data = daily_data['OrderItemQuantity'].diff().dropna() if adf_result > 0.05 else daily_data['OrderItemQuantity']

# Split the data into train and test sets
train_size = int(len(differenced_data) * 0.8)
train_data, test_data = differenced_data[:train_size], differenced_data[train_size:]

# Fit SARIMA model (seasonal components based on observed seasonality, adjust order as needed)
# SARIMA parameters (example configuration: (1,1,1)(1,1,1,7) for weekly seasonality)
sarima_model = SARIMAX(train_data, order=(1, 1, 1), seasonal_order=(1, 1, 1, 7))
sarima_result = sarima_model.fit(disp=False)

# Forecasting for the length of test data
forecast_steps = len(test_data)
forecast = sarima_result.get_forecast(steps=forecast_steps)
forecast_values = forecast.predicted_mean

# Calculate evaluation metrics
mae = mean_absolute_error(test_data, forecast_values)
mse = mean_squared_error(test_data, forecast_values)
rmse = np.sqrt(mse)

print("Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")

# Forecast for the next 30 days (beyond test period)
future_forecast_steps = 30
future_forecast = sarima_result.get_forecast(steps=future_forecast_steps)
future_forecast_index = pd.date_range(daily_data.index[-1] + pd.Timedelta(days=1), periods=future_forecast_steps, freq='D')
future_forecast_values = future_forecast.predicted_mean

# Plotting actual data with test forecast and future forecast
plt.figure(figsize=(12, 6))
plt.plot(daily_data.index, daily_data['OrderItemQuantity'], label='Actual Demand')
plt.plot(test_data.index, forecast_values, label='Test Forecasted Demand', color='orange')
plt.plot(future_forecast_index, future_forecast_values, label='Future Forecasted Demand', color='green')
plt.xlabel('Date')
plt.ylabel('Order Item Quantity')
plt.title('SARIMA Model Forecast with Evaluation Metrics')
plt.legend()
plt.grid()
plt.show()

# Forecasting for next 30 days
forecast_steps = 30
sarima_forecast = sarima_result.get_forecast(steps=forecast_steps).predicted_mean


import pandas as pd
import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

# Sample Parameters (adjust these based on actual values)
holding_cost_per_unit = 1.5   # Holding cost per unit per day
order_cost = 50               # Fixed cost per order
lead_time = 7                 # Lead time in days
service_level = 0.95          # Desired service level

# Demand forecast (assuming `sarima_forecast` from SARIMA model is available)
forecast_demand = sarima_forecast  # Forecasted demand series from the SARIMA model

# 1. Calculate Safety Stock
demand_std_dev = forecast_demand.std()  # Standard deviation of demand
z_score = norm.ppf(service_level)       # Z-score for the desired service level

# Safety stock formula
safety_stock = z_score * demand_std_dev * np.sqrt(lead_time)
print(f"Safety Stock: {safety_stock:.2f}")

# 2. Calculate Reorder Point
# Average lead-time demand (mean of forecast over lead time period)
lead_time_demand = forecast_demand[:lead_time].sum()
reorder_point = lead_time_demand + safety_stock
print(f"Reorder Point: {reorder_point:.2f}")

# 3. Economic Order Quantity (EOQ)
# Calculate annual demand and EOQ
daily_demand_avg = forecast_demand.mean()
annual_demand = daily_demand_avg * 365  # Estimated annual demand
EOQ = np.sqrt((2 * order_cost * annual_demand) / holding_cost_per_unit)
print(f"Economic Order Quantity (EOQ): {EOQ:.2f}")

# 4. Inventory Optimization Algorithm
# Define a policy to determine when to reorder and how much to order
inventory_level = EOQ + safety_stock  # Initial inventory level
inventory_log = []  # To log inventory levels over forecast period

for day in range(len(forecast_demand)):
    daily_demand = forecast_demand.iloc[day]
    inventory_level -= daily_demand  # Reduce inventory by daily demand

    # Log inventory level for plotting
    inventory_log.append(inventory_level)

    # Check if inventory is below reorder point
    if inventory_level <= reorder_point:
        inventory_level += EOQ  # Place order for EOQ units

# 5. Plot the Inventory Level over the Forecast Period
plt.figure(figsize=(12, 6))
plt.plot(forecast_demand.index, forecast_demand, label='Forecasted Demand', color='blue')
plt.plot(forecast_demand.index, inventory_log, label='Inventory Level', color='green')
plt.axhline(y=reorder_point, color='red', linestyle='--', label='Reorder Point')
plt.axhline(y=safety_stock, color='orange', linestyle='--', label='Safety Stock')
plt.title('Inventory Optimization with Reorder Point and Safety Stock')
plt.xlabel('Date')
plt.ylabel('Units')
plt.legend()
plt.grid()
plt.show()

# Display Summary
print("Optimization Summary:")
print(f"Safety Stock: {safety_stock:.2f}")
print(f"Reorder Point: {reorder_point:.2f}")
print(f"Economic Order Quantity (EOQ): {EOQ:.2f}")


